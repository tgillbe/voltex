name: Build Electron App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build Electron app
      run: |
        npm run package
        npm run make
      env:
        CI: true

    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: voltex-windows-x64
        path: |
          out/make/squirrel.windows/x64/*.exe
          out/make/zip/win32/x64/*.zip

    - name: Upload Linux artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: voltex-linux-x64
        path: |
          out/make/deb/x64/*.deb
          out/make/rpm/x64/*.rpm
          out/make/zip/linux/x64/*.zip

    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: voltex-macos-arm64
        path: |
          out/make/zip/darwin/arm64/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Upload release assets
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          const uploadAsset = async (filePath, name) => {
            const data = fs.readFileSync(filePath);
            await github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              name: name,
              data: data,
            });
          };
          
          const artifactDirs = ['voltex-windows-x64', 'voltex-linux-x64', 'voltex-macos-arm64'];
          
          for (const dir of artifactDirs) {
            const dirPath = path.join('artifacts', dir);
            if (fs.existsSync(dirPath)) {
              const files = fs.readdirSync(dirPath, { recursive: true });
              for (const file of files) {
                const filePath = path.join(dirPath, file);
                if (fs.statSync(filePath).isFile()) {
                  await uploadAsset(filePath, path.basename(file));
                }
              }
            }
          }
